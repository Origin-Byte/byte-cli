{
    // Package of the collection contract.
    "packageName": "gnomes_inc",
    // Collection details.
    // Required
    "collection": {
        // Name of the collection. Will be used as module name in the generated contract (after sanitization).
        // Required
        "name": "gnomes",
        // Description of the collection.
        "description": "Test contract generated by Gutenberg",
        // Symbol of the collection.
        "symbol": "GNOMES",
        // The URL where more information about the collection can be found.
        "url": "https://originbyte.io/",
        // Array of creators' addresses. This is used solely for display purposes. Royalties are defined under settings object.
        // Required. Can be empty.
        "creators": [
            "0x0b86be5d779fac217b41d484b8040ad5145dc9ba0cba099d083c6cbda50d983e"
        ],
        // Supply of collection. Contract may enforce NFT supply on the collection level, however it may also only track the supply.
        // Required.
        // Possible values: `["untracked", "tracked", { "enforced": 600 }]`
        "supply": {
            "enforced": 600
        },
        // Tags for the NFTs. Custom tags are supported as well
        "tags": [
            "Art",
            "ProfilePicture",
            "Collectible",
            "GameAsset",
            "TokenisedAsset",
            "Ticker",
            "DomainName",
            "Music",
            "Video",
            "Ticket",
            "License",
            "Utility"
        ]
    },
    // NFT details.
    // Required
    "nft": {
        // The type name of the NFT.
        // Required
        "typeName": "Gnome",
        // If default, generates burn_nft, burn_nft_in_listing, burn_nft_in_listing_with_id functions.
        // Permissionless generates burn_own_nft and burn_own_nft_in_kiosk functions.
        // Possible values: [disabled, permissioned, permissionless]
        // Required
        "burn": "permissioned",
        // If set, generates dynamic metadata methods
        "dynamic": false
    },
    // Feature settings.
    // Required
    "settings": {
        // Policies for minting NFTs.
        // Required
        "mintPolicies": {
            // Specifies the supply of the NFTs. If not provided, the collection will be uncapped.
            "supply": 3333,
            // Specifies whether the launchpad minting policy is enabled. Generates mint_nft function.
            // Required
            "launchpad": true,
            // Specifies whether the airdrop minting policy is enabled. Generates airdrop_nft function.
            // Required
            "airdrop": true
        },
        // Policies for requests.
        // Required
        "requestPolicies": {
            // Specifies whether transfer requests are allowed.
            // Required
            "transfer": true,
            // Specifies whether withdraw requests are allowed.
            // Required
            "withdraw": false,
            // Specifies whether borrowing requests are allowed.
            // Required
            "borrow": true
        },
        // Royalty settings.
        "royalties": {
            // Proportional royalty settings. Currently, only this strategy is supported.
            // Required
            "proportional": {
                // Shares of the royalties.
                // Required
                "shares": [
                    {
                        // Address of the first share recipient.
                        // Required
                        "address": "sui::tx_context::sender(ctx)",
                        // The share of the royalties this recipient will receive. This is represented as a percentage multiplied by 100 (i.e., 9000 represents 90.00%).
                        // Required
                        "shareBps": 9000
                    },
                    {
                        // Address of the second share recipient.
                        // Required
                        "address": "0x0b86be5d779fac217b41d484b8040ad5145dc9ba0cba099d083c6cbda50d983e",
                        // The share of the royalties this recipient will receive. This is represented as a percentage multiplied by 100 (i.e., 1000 represents 10.00%).
                        // Required
                        "shareBps": 1000
                    }
                ],
                // Basis points for calculating the proportional royalties. Here, 500 basis points represent 5.00%.
                // Required
                "collectionRoyaltyBps": 500
            }
        },
        // The type of orderbook to use. "Protected" means enable_orderbook and disable_orderbook functions will be generated.
        // "Unprotected" generates the orderbook on publishing
        // Required
        // Possible values: `["none", "unprotected", "protected"]`
        "orderbook": "protected"
    }
}